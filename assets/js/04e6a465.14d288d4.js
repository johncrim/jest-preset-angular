"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1274],{4137:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return d}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),g=p(n),d=a,c=g["".concat(l,".").concat(d)]||g[d]||m[d]||o;return n?r.createElement(c,s(s({ref:t},u),{},{components:n})):r.createElement(c,s({ref:t},u))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=g;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:a,s[1]=i;for(var p=2;p<o;p++)s[p]=n[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},4705:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return l},metadata:function(){return p},toc:function(){return u},default:function(){return g}});var r=n(7462),a=n(3366),o=(n(7294),n(4137)),s=["components"],i={id:"angular-13+",title:"Angular >=13"},l=void 0,p={unversionedId:"guides/angular-13+",id:"version-11.x/guides/angular-13+",isDocsHomePage:!1,title:"Angular >=13",description:"Angular 13 introduces ESM package format for Angular packages. jest-preset-angular",source:"@site/versioned_docs/version-11.x/guides/angular-13+.md",sourceDirName:"guides",slug:"/guides/angular-13+",permalink:"/jest-preset-angular/docs/guides/angular-13+",editUrl:"https://github.com/thymikee/jest-preset-angular/edit/main/website/versioned_docs/version-11.x/guides/angular-13+.md",tags:[],version:"11.x",frontMatter:{id:"angular-13+",title:"Angular >=13"},sidebar:"version-11.x-docs",previous:{title:"Angular Ivy",permalink:"/jest-preset-angular/docs/guides/angular-ivy"},next:{title:"ESM Support",permalink:"/jest-preset-angular/docs/guides/esm-support"}},u=[{value:"Migration steps from Angular &lt; 13",id:"migration-steps-from-angular--13",children:[],level:2},{value:"Potential issues with Angular 13 ESM package format and workaround",id:"potential-issues-with-angular-13-esm-package-format-and-workaround",children:[{value:"<code>Cannot find modules</code> error when importing any deep paths from Angular ESM format packages",id:"cannot-find-modules-error-when-importing-any-deep-paths-from-angular-esm-format-packages",children:[],level:3},{value:"Usage with Angular libraries which are built with Angular CLI 13",id:"usage-with-angular-libraries-which-are-built-with-angular-cli-13",children:[],level:3}],level:2}],m={toc:u};function g(e){var t=e.components,n=(0,a.Z)(e,s);return(0,o.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Angular 13")," introduces ESM package format for Angular packages. ",(0,o.kt)("inlineCode",{parentName:"p"},"jest-preset-angular"),"\ncurrently supports testing with Jest in ",(0,o.kt)("inlineCode",{parentName:"p"},"CommonJS")," mode with ",(0,o.kt)("strong",{parentName:"p"},"Angular 13")," using ",(0,o.kt)("a",{parentName:"p",href:"/jest-preset-angular/docs/getting-started/presets"},"default preset"),".\nJest ESM support with ",(0,o.kt)("strong",{parentName:"p"},"Angular 13")," is being worked on and will come in the future releases."),(0,o.kt)("p",null,"Starting from ",(0,o.kt)("strong",{parentName:"p"},"11.0.0"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"jest-preset-angular")," introduces a few extra changes to be able to run Jest with ",(0,o.kt)("strong",{parentName:"p"},"Angular 13"),":"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"ng-jest-resolver")," is introduced as a custom Jest resolver to resolve ",(0,o.kt)("inlineCode",{parentName:"p"},".mjs")," files.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"moduleFileExtensions")," is updated to include ",(0,o.kt)("inlineCode",{parentName:"p"},"mjs")," files as accepted module format.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"transformIgnorePatterns")," is added to inform Jest to transform ",(0,o.kt)("inlineCode",{parentName:"p"},".mjs")," files.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"transform")," is updated to include ",(0,o.kt)("inlineCode",{parentName:"p"},".mjs")," extension to transform to ",(0,o.kt)("inlineCode",{parentName:"p"},"CommonJS")," codes."))),(0,o.kt)("h2",{id:"migration-steps-from-angular--13"},"Migration steps from Angular < 13"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Upgrade the project to ",(0,o.kt)("strong",{parentName:"p"},"Angular 13")," following ",(0,o.kt)("a",{parentName:"p",href:"https://update.angular.io/"},"https://update.angular.io/"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"If one is using the default preset as following:"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"// jest.config.js\nmodule.exports = {\n  preset: 'jest-preset-angular',\n};\n")),(0,o.kt)("p",null,"there are no migration steps required"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"If one is ",(0,o.kt)("strong",{parentName:"li"},"NOT")," having ",(0,o.kt)("inlineCode",{parentName:"li"},"preset: 'jest-preset-angular'")," in Jest config, the config needs to be updated with new values for\n",(0,o.kt)("inlineCode",{parentName:"li"},"resolver"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"transformIgnorePatterns")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"transform"),":")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"// jest.config.js\nmodule.exports = {\n  // ...other options\n  moduleFileExtensions: ['ts', 'html', 'js', 'json', 'mjs'],\n  resolver: 'jest-preset-angular/build/resolvers/ng-jest-resolver.js',\n  transformIgnorePatterns: ['node_modules/(?!.*\\\\.mjs$)'],\n  transform: {\n    '^.+\\\\.(ts|js|mjs|html|svg)$': 'jest-preset-angular',\n  },\n};\n")),(0,o.kt)("h2",{id:"potential-issues-with-angular-13-esm-package-format-and-workaround"},"Potential issues with Angular 13 ESM package format and workaround"),(0,o.kt)("h3",{id:"cannot-find-modules-error-when-importing-any-deep-paths-from-angular-esm-format-packages"},(0,o.kt)("inlineCode",{parentName:"h3"},"Cannot find modules")," error when importing any deep paths from Angular ESM format packages"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Angular 13 ESM package format makes Jest resolution not able to resolve the correct ",(0,o.kt)("inlineCode",{parentName:"li"},".mjs")," files. Even though we introduced\n",(0,o.kt)("inlineCode",{parentName:"li"},"ng-jest-resolver")," as a part of the preset, this resolver won't work for all scenarios. One might get Jest error like")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Cannot find module '@angular/common/locales/xx' from 'src/app/app.component.spec.ts'\n")),(0,o.kt)("p",null,"To fix this issue, one needs to add ",(0,o.kt)("inlineCode",{parentName:"p"},"mjs")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"moduleFileExtensions")," as following"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"// jest.config.js\nmodule.exports = {\n  // ...other options\n  moduleFileExtensions: ['ts', 'html', 'js', 'json', 'mjs'],\n};\n")),(0,o.kt)("p",null,"If the issue still ",(0,o.kt)("strong",{parentName:"p"},"persists"),", you might need to configure ",(0,o.kt)("a",{parentName:"p",href:"https://jestjs.io/docs/configuration#modulenamemapper-objectstring-string--arraystring"},"moduleNameMapper"),"\nor extend the behavior the default ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/thymikee/jest-preset-angular/blob/main/src/resolvers/ng-jest-resolver.ts"},"resolver")," of this preset."),(0,o.kt)("h3",{id:"usage-with-angular-libraries-which-are-built-with-angular-cli-13"},"Usage with Angular libraries which are built with Angular CLI 13"),(0,o.kt)("p",null,"Besides, the changes in Angular packages themselves, ",(0,o.kt)("strong",{parentName:"p"},"Angular")," libraries which are built with ",(0,o.kt)("strong",{parentName:"p"},"Angular CLI 13")," also introduce\nESM package format. Similar to Angular packages, Jest doesn't understand ",(0,o.kt)("inlineCode",{parentName:"p"},".mjs")," files which are in these new format\nlibraries in Jest ",(0,o.kt)("strong",{parentName:"p"},"CommonJS")," mode."),(0,o.kt)("p",null,"To fix this issue, one should modify ",(0,o.kt)("inlineCode",{parentName:"p"},"transformIgnorePatterns")," to be as following:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"// jest.config.js\nmodule.exports = {\n  // ...other options\n  transformIgnorePatterns: ['node_modules/(?!.*\\\\.mjs$)'],\n};\n")))}g.isMDXComponent=!0}}]);